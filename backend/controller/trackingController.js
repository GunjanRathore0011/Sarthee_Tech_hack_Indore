const TrackingLink = require('../models/TrackingLink.js');
const { nanoid } = require('nanoid'); // short unique id ke liye
const TrackingVisit = require('../models/TrackingVisit.js');
require('dotenv').config();

exports.generateTrackingLink = async (req, res) => {
  try {
    const { caseId, originalUrl } = req.body;
    const investigatorId = req.user.userId; // auth middleware se ayega

    // console.log('Generating tracking link for case:', caseId, 'URL:', originalUrl);
    // console.log('Investigator ID:', investigatorId);

    if (!caseId || !originalUrl) {
      return res.status(200).json({ success: true, message: 'caseId and originalUrl are required' });
    }

    // unique short code generate karo
    const shortCode = nanoid(8);

    // save to DB
    const newLink = await TrackingLink.create({
      caseId,
      originalUrl,
      shortCode,
      generatedBy: investigatorId,
    });

    const trackingUrl = `${process.env.BASE_URL}/t/${shortCode}`;

    res.status(200).json({
      success: true,
      message: 'Tracking link generated successfully',
      trackingUrl,
      linkDetails: newLink
    });

  } catch (error) {
    console.error('Error generating tracking link:', error);
    res.status(500).json({
      success: false,
      message: 'Server error'
    });
  }
};



exports.handleRedirect = async (req, res) => {
  try {
    const { shortCode } = req.params;

    // find tracking link
    const link = await TrackingLink.findOne({ shortCode });
    if (!link) {
      return res.status(404).json({
        success: false,
        message: 'Invalid tracking link'
      });
    }

    // get IP and user agent

    const ipAddress =

      req.headers['x-forwarded-for']?.split(',')[0] || req.socket.remoteAddress;

    const userAgent = req.headers['user-agent'];

    // save visit log
    await TrackingVisit.create({
      caseId: link.caseId,
      linkId: link._id,
      ipAddress,
      userAgent,
    });

    // redirect to original url
    return res.redirect(link.originalUrl);

  } catch (error) {
    console.error('Error handling redirect:', error);
    res.status(500).json({
      success: false,
      message: 'Server error'
    });
  }
};


exports.getCaseTrackingLogs = async (req, res) => {
  try {
    const { caseId } = req.params;
    // console.log('Fetching logs for case:', caseId);
    // fetch all visits related to this case
    const visits = await TrackingVisit.find({ caseId })
      .populate('linkId', 'originalUrl shortCode')
      .sort({ createdAt: -1 });

    if (visits.length === 0) {
      return res.status(200).json({
        success: true,
        message: 'No tracking logs found for this case',
      });
    }
    return res.status(200).json({
      success: true,
      count: visits.length,
      data: visits,
    });
  } catch (error) {
    console.error('Error fetching case logs:', error);
    res.status(500).json({ message: 'Server error' });
  }
};


exports.getInvestigatorTrackingLogs = async (req, res) => {
  try {
    const investigatorId = req.user.userId; // auth se aayega

    // Find all links generated by this investigator
    const links = await TrackingLink.find({ generatedBy: investigatorId }).select("_id");

    const linkIds = links.map(l => l._id);
    if (linkIds.length === 0) {
      return res.status(200).json({
        success: true,
        message: 'No tracking links found for this investigator'
      });
    }
    // console.log('Fetching logs for investigator:', investigatorId, 'Links:', linkIds);
    // Get all visits related to those links
    const visits = await TrackingVisit.find({ linkId: { $in: linkIds } })
      .populate("linkId", "originalUrl shortCode caseId")
      .sort({ createdAt: -1 });

    return res.status(200).json({
      success: true,
      count: visits.length,
      data: visits,
    });
  } catch (error) {
    console.error("Error fetching investigator logs:", error);
    res.status(500).json({ success: false, message: "Server error" });
  }
};
